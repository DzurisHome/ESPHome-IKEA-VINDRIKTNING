#ESPHome Core
esphome:
  name: living-room-air-quality
  area: Living Room

esp8266:
  board: d1_mini

#Logger
logger:

#WiFi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.0.155
    gateway: 192.168.0.1
    subnet: 255.255.255.0

  ap:
    ssid: "Living Room Air Quality DH AP"
    password: !secret ap_password

captive_portal:

#Web Server
web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

#OTA
ota:
  safe_mode: true
  password: !secret ota_password

#MQTT
mqtt:
  broker: !secret mqtt_broker_ip_address
  username: !secret mqtt_broker_username
  password: !secret mqtt_broker_password
  client_id: "Living Room Air Quality"
  discovery: false
  topic_prefix: "Living Room Air Quality"

#Home Assistant API Integration
api:
  encryption:
    key: !secret api_encryption_key

#Home Assistant Time
time:
  - platform: homeassistant
    id: homeassistant_time

#Device Required
uart:
  rx_pin: D2
  baud_rate: 9600

#Device
binary_sensor:
  - platform: gpio
    pin:
      number: D4
      inverted: true
    name: "Living Room Air Quality Fan"

sensor:
  - platform: pm1006
    pm_2_5:
      id: particulate_matter_2_5
      name: "Living Room Particulate Matter 2.5µm"

  - platform: adc
    pin: A0
    id: carbon_monoxide
    name: "Living Room Carbon Monoxide"
    icon: mdi:molecule-co
    update_interval: 30s
    unit_of_measurement: "ppm"
    device_class: "carbon_monoxide"
    state_class: "measurement"
    filters:
        - lambda: return (x * 1024/5); 

#Diagnostic
  - platform: wifi_signal
    name: "Living Room Air Quality RSSI"
    update_interval: 1min
    unit_of_measurement: "dBm"
    device_class: "signal_strength"
    state_class: "measurement"
    entity_category: "diagnostic"

  - platform: uptime
    id: uptime_seconds
    name: "Uptime Seconds"
    icon: mdi:clock-time-four-outline
    update_interval: 1min
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_sensor
            state: !lambda |-
              int seconds = round(id(uptime_seconds).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

#Sensor
text_sensor:
  - platform: template
    name: "Living Room Air Quality Color"
    icon: mdi:led-strip
    update_interval: 30s
    lambda: |-
      if (id(particulate_matter_2_5).state <= 35.0) {
        return {"Green"};
      } else if (id(particulate_matter_2_5).state > 35.0 && id(particulate_matter_2_5).state <= 85.0) {
        return {"Orange"};
      } else {
        return {"Red"};
      }

  - platform: template
    name: "Living Room Particulate Matter 2.5µm Air Quality"
    icon: mdi:emoticon
    update_interval: 30s
    lambda: |-
      if (id(particulate_matter_2_5).state <= 12.0) {
        return {"Excellent"};
      } else if (id(particulate_matter_2_5).state > 12.0 && id(particulate_matter_2_5).state <= 35.0) {
        return {"Good"};
      } else if (id(particulate_matter_2_5).state > 35.0 && id(particulate_matter_2_5).state <= 55.0) {
        return {"Moderate"};
      } else if (id(particulate_matter_2_5).state > 55.0 && id(particulate_matter_2_5).state <= 150.0) {
        return {"Unhealthy for Sensitive Groups"};
      } else if (id(particulate_matter_2_5).state > 150.0 && id(particulate_matter_2_5).state <= 250.0) {
        return {"Unhealthy"};
      } else if (id(particulate_matter_2_5).state > 250.0 && id(particulate_matter_2_5).state <= 350.0) {
        return {"Very Unhealthy"};
      } else {
        return {"Hazardous"};
      }

  - platform: template
    name: "Living Room Carbon Monoxide Air Quality"
    icon: mdi:emoticon
    update_interval: 30s
    lambda: |-
      if (id(carbon_monoxide).state <= 50.0) {
        return {"Excellent"};
      } else if (id(carbon_monoxide).state > 50.0 && id(carbon_monoxide).state <= 100.0) {
        return {"Good"};
      } else if (id(carbon_monoxide).state > 100.0 && id(carbon_monoxide).state <= 200.0) {
        return {"Moderate"};
      } else if (id(carbon_monoxide).state > 200.0 && id(carbon_monoxide).state <= 400.0) {
        return {"Unhealthy for Sensitive Groups"};
      } else if (id(carbon_monoxide).state > 400.0 && id(carbon_monoxide).state <= 800.0) {
        return {"Unhealthy"};
      } else {
        return {"Very Unhealthy"};
      }

#Diagnostic
  - platform: template
    id: uptime_sensor
    name: "Living Room Air Quality Uptime"
    icon: mdi:clock-time-four-outline
    entity_category: "diagnostic"

#Configuration
button:
  - platform: restart
    name: "Living Room Air Quality Restart"
